-- StarClient ClickGui Library
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

-- Main ClickGui Module
local StarClientGui = {}
StarClientGui.__index = StarClientGui

-- Create new ClickGui instance
function StarClientGui.new()
    local self = setmetatable({}, StarClientGui)
    
    -- ScreenGui Setup
    self.ScreenGui = Instance.new("ScreenGui")
    self.ScreenGui.Name = "StarClientGui"
    self.ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    self.ScreenGui.Enabled = false
    self.ScreenGui.ResetOnSpawn = false
    
    -- Main Frame (Dark Gray with Rounded Corners)
    self.MainFrame = Instance.new("Frame")
    self.MainFrame.Size = UDim2.new(0, 600, 0, 400)
    self.MainFrame.Position = UDim2.new(0.5, -300, 0.5, -200)
    self.MainFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    self.MainFrame.BorderSizePixel = 0
    self.MainFrame.ClipsDescendants = true
    self.MainFrame.Parent = self.ScreenGui
    
    local MainCorner = Instance.new("UICorner")
    MainCorner.CornerRadius = UDim.new(0, 8)
    MainCorner.Parent = self.MainFrame
    
    -- Sidebar (Darker Rectangle, Rounded Left Corners Only)
    self.Sidebar = Instance.new("Frame")
    self.Sidebar.Size = UDim2.new(0, 150, 1, 0)
    self.Sidebar.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    self.Sidebar.BorderSizePixel = 0
    self.Sidebar.Parent = self.MainFrame
    
    local SidebarCorner = Instance.new("UICorner")
    SidebarCorner.CornerRadius = UDim.new(0, 8)
    SidebarCorner.Parent = self.Sidebar
    
    -- Apply left-only rounded corners by masking right side
    local SidebarMask = Instance.new("Frame")
    SidebarMask.Size = UDim2.new(0, 5, 1, 0)
    SidebarMask.Position = UDim2.new(1, -5, 0, 0)
    SidebarMask.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    SidebarMask.BorderSizePixel = 0
    SidebarMask.Parent = self.Sidebar
    
    -- Title (StarClient)
    self.Title = Instance.new("TextLabel")
    self.Title.Size = UDim2.new(1, 0, 0, 30)
    self.Title.BackgroundTransparency = 1
    self.Title.Text = "StarClient"
    self.Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    self.Title.TextSize = 32
    self.Title.Font = Enum.Font.SourceSansBold
    self.Title.Parent = self.Sidebar
    
    -- Dragging Functionality
    local dragging, dragStart, startPos
    self.Title.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = self.MainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            self.MainFrame.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)
    
    -- Tabs
    self.Tabs = {}
    self.TabButtons = {}
    self.CurrentTab = nil
    
    local tabNames = {"Combat", "Movement", "Visuals", "Exploits", "Utils"}
    for i, tabName in ipairs(tabNames) do
        local TabButton = Instance.new("TextButton")
        TabButton.Size = UDim2.new(1, 0, 0, 30)
        TabButton.Position = UDim2.new(0, 0, 0, 30 + (i - 1) * 35)
        TabButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        TabButton.Text = tabName
        TabButton.TextColor3 = Color3.fromRGB(200, 200, 200)
        TabButton.TextSize = 14
        TabButton.Font = Enum.Font.SourceSans
        TabButton.BorderSizePixel = 1
        TabButton.BorderColor3 = Color3.fromRGB(50, 50, 50)
        TabButton.Parent = self.Sidebar
        
        local TabFrame = Instance.new("ScrollingFrame")
        TabFrame.Size = UDim2.new(1, -150, 1, 0)
        TabFrame.Position = UDim2.new(0, 150, 0, 0)
        TabFrame.BackgroundTransparency = 1
        TabFrame.BorderSizePixel = 0
        TabFrame.ScrollBarThickness = 4
        TabFrame.ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255)
        TabFrame.Visible = false
        TabFrame.Parent = self.MainFrame
        
        local UIListLayout = Instance.new("UIListLayout")
        UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        UIListLayout.Padding = UDim.new(0, 5)
        UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        UIListLayout.Parent = TabFrame
        
        local UIPadding = Instance.new("UIPadding")
        UIPadding.PaddingLeft = UDim.new(0, 10)
        UIPadding.PaddingRight = UDim.new(0, 10)
        UIPadding.Parent = TabFrame
        
        local TopPadding = Instance.new("UIListLayout")
        TopPadding.Padding = UDim.new(0, 10)
        TopPadding.Parent = TabFrame
        
        self.Tabs[tabName] = TabFrame
        self.TabButtons[tabName] = TabButton
        
        TabButton.MouseButton1Click:Connect(function()
            if self.CurrentTab ~= tabName then
                if self.CurrentTab then
                    self.Tabs[self.CurrentTab].Visible = false
                    self.TabButtons[self.CurrentTab].BackgroundColor3 = Color3.fromRGB(30, 30, 30)
                end
                self.CurrentTab = tabName
                TabFrame.Visible = true
                local tween = TweenService:Create(
                    TabButton,
                    TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                    {BackgroundColor3 = Color3.fromRGB(50, 50, 50)}
                )
                tween:Play()
            end
        end)
    end
    
    UserInputService.InputBegan:Connect(function(input)
        if input.KeyCode == Enum.KeyCode.Insert then
            self.ScreenGui.Enabled = not self.ScreenGui.Enabled
        end
    end)
    
    return self
end

function StarClientGui:AddFunction(tabName, funcName, callback)
    local TabFrame = self.Tabs[tabName]
    if not TabFrame then return end
    
    local FuncFrame = Instance.new("Frame")
    FuncFrame.Size = UDim2.new(0.8, 0, 0, 50)
    FuncFrame.Position = UDim2.new(0, 0, 0, 0)
    FuncFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    FuncFrame.BorderSizePixel = 1
    FuncFrame.BorderColor3 = Color3.fromRGB(50, 50, 50)
    FuncFrame.Parent = TabFrame
    
    local FuncCorner = Instance.new("UICorner")
    FuncCorner.CornerRadius = UDim.new(0, 4)
    FuncCorner.Parent = FuncFrame
    
    local FuncName = Instance.new("TextLabel")
    FuncName.Size = UDim2.new(0.4, 0, 0, 20)
    FuncName.Position = UDim2.new(0, 10, 0, 5)
    FuncName.BackgroundTransparency = 1
    FuncName.Text = funcName
    FuncName.TextColor3 = Color3.fromRGB(255, 255, 255)
    FuncName.TextSize = 14
    FuncName.Font = Enum.Font.SourceSans
    FuncName.TextXAlignment = Enum.TextXAlignment.Left
    FuncName.Parent = FuncFrame
    
    local BindLabel = Instance.new("TextLabel")
    BindLabel.Size = UDim2.new(0.2, 0, 0, 20)
    BindLabel.Position = UDim2.new(0.55, 0, 0, 5)
    BindLabel.BackgroundTransparency = 1
    BindLabel.Text = "Bind:"
    BindLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    BindLabel.TextSize = 14
    BindLabel.Font = Enum.Font.SourceSans
    BindLabel.TextXAlignment = Enum.TextXAlignment.Left
    BindLabel.Parent = FuncFrame
    
    local BindButton = Instance.new("TextButton")
    BindButton.Size = UDim2.new(0.15, 0, 0, 20)
    BindButton.Position = UDim2.new(0.75, 0, 0, 5)
    BindButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    BindButton.Text = "None"
    BindButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    BindButton.TextSize = 12
    BindButton.Font = Enum.Font.SourceSans
    BindButton.Parent = FuncFrame
    
    local BindCorner = Instance.new("UICorner")
    BindCorner.CornerRadius = UDim.new(0, 4)
    BindCorner.Parent = BindButton
    
    local Toggle = Instance.new("TextButton")
    Toggle.Size = UDim2.new(0, 20, 0, 20)
    Toggle.Position = UDim2.new(0.4, 0, 0, 5)
    Toggle.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    Toggle.Text = ""
    Toggle.Parent = FuncFrame
    
    local ToggleCorner = Instance.new("UICorner")
    ToggleCorner.CornerRadius = UDim.new(0, 4)
    ToggleCorner.Parent = Toggle
    
    -- Container for sub-elements
    local SubContainer = Instance.new("Frame")
    SubContainer.Size = UDim2.new(1, -10, 0, 0)
    SubContainer.Position = UDim2.new(0, 5, 0, 30)
    SubContainer.BackgroundTransparency = 1
    SubContainer.Visible = false
    SubContainer.Parent = FuncFrame
    
    local SubUIListLayout = Instance.new("UIListLayout")
    SubUIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    SubUIListLayout.Padding = UDim.new(0, 5)
    SubUIListLayout.Parent = SubContainer
    
    local enabled = false
    local bindKey = nil
    Toggle.MouseButton1Click:Connect(function()
        enabled = not enabled
        Toggle.BackgroundColor3 = enabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(100, 100, 100)
        SubContainer.Visible = enabled
        FuncFrame.Size = enabled and UDim2.new(0.8, 0, 0, 30 + SubContainer.UIListLayout.AbsoluteContentSize.Y + 10) or UDim2.new(0.8, 0, 0, 50)
        TabFrame.CanvasSize = UDim2.new(0, 0, 0, TabFrame.UIListLayout.AbsoluteContentSize.Y + 10)
        if callback then
            callback(enabled)
            self:ShowNotification(funcName, enabled)
        end
    end)
    
    BindButton.MouseButton1Click:Connect(function()
        BindButton.Text = "..."
        local connection
        connection = UserInputService.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.Keyboard then
                bindKey = input.KeyCode
                BindButton.Text = bindKey.Name
                connection:Disconnect()
            end
        end)
        wait(1)
        if BindButton.Text == "..." then
            BindButton.Text = "None"
            bindKey = nil
            connection:Disconnect()
        end
    end)
    
    UserInputService.InputBegan:Connect(function(input)
        if bindKey and input.KeyCode == bindKey then
            enabled = not enabled
            Toggle.BackgroundColor3 = enabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(100, 100, 100)
            SubContainer.Visible = enabled
            FuncFrame.Size = enabled and UDim2.new(0.8, 0, 0, 30 + SubContainer.UIListLayout.AbsoluteContentSize.Y + 10) or UDim2.new(0.8, 0, 0, 50)
            TabFrame.CanvasSize = UDim2.new(0, 0, 0, TabFrame.UIListLayout.AbsoluteContentSize.Y + 10)
            if callback then
                callback(enabled)
                self:ShowNotification(funcName, enabled)
            end
        elseif input.KeyCode == Enum.KeyCode.Delete and BindButton then
            bindKey = nil
            BindButton.Text = "None"
        end
    end)
    
    return {Toggle = Toggle, BindButton = BindButton}
end

function StarClientGui:AddSlider(tabName, funcName, min, max, default, callback)
    local TabFrame = self.Tabs[tabName]
    if not TabFrame then return end
    
    local SliderFrame = Instance.new("Frame")
    SliderFrame.Size = UDim2.new(0.8, 0, 0, 50)
    SliderFrame.Position = UDim2.new(0, 0, 0, 0)
    SliderFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    SliderFrame.BorderSizePixel = 1
    SliderFrame.BorderColor3 = Color3.fromRGB(50, 50, 50)
    SliderFrame.Parent = TabFrame
    
    local SliderCorner = Instance.new("UICorner")
    SliderCorner.CornerRadius = UDim.new(0, 4)
    SliderCorner.Parent = SliderFrame
    
    local SliderName = Instance.new("TextLabel")
    SliderName.Size = UDim2.new(0.7, 0, 0, 20)
    SliderName.Position = UDim2.new(0, 10, 0, 5)
    SliderName.BackgroundTransparency = 1
    SliderName.Text = funcName
    SliderName.TextColor3 = Color3.fromRGB(255, 255, 255)
    SliderName.TextSize = 14
    SliderName.Font = Enum.Font.SourceSans
    SliderName.TextXAlignment = Enum.TextXAlignment.Left
    SliderName.Parent = SliderFrame
    
    local ValueLabel = Instance.new("TextLabel")
    ValueLabel.Size = UDim2.new(0.3, 0, 0, 20)
    ValueLabel.Position = UDim2.new(0.7, 0, 0, 5)
    ValueLabel.BackgroundTransparency = 1
    ValueLabel.Text = tostring(default)
    ValueLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    ValueLabel.TextSize = 14
    ValueLabel.Font = Enum.Font.SourceSans
    ValueLabel.TextXAlignment = Enum.TextXAlignment.Right
    ValueLabel.Parent = SliderFrame
    
    local SliderBar = Instance.new("Frame")
    SliderBar.Size = UDim2.new(1, -20, 0, 10)
    SliderBar.Position = UDim2.new(0, 10, 0, 30)
    SliderBar.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    SliderBar.Parent = SliderFrame
    
    local SliderBarCorner = Instance.new("UICorner")
    SliderBarCorner.CornerRadius = UDim.new(0, 4)
    SliderBarCorner.Parent = SliderBar
    
    local Fill = Instance.new("Frame")
    Fill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
    Fill.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Fill.BorderSizePixel = 0
    Fill.Parent = SliderBar
    
    local FillCorner = Instance.new("UICorner")
    FillCorner.CornerRadius = UDim.new(0, 4)
    FillCorner.Parent = Fill
    
    local Knob = Instance.new("Frame")
    Knob.Size = UDim2.new(0, 14, 0, 14)
    Knob.Position = UDim2.new((default - min) / (max - min), -7, 0, -2)
    Knob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Knob.Parent = SliderBar
    
    local KnobCorner = Instance.new("UICorner")
    KnobCorner.CornerRadius = UDim.new(0, 7)
    KnobCorner.Parent = Knob
    
    local dragging = false
    Knob.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local mouseX = input.Position.X
            local barX = SliderBar.AbsolutePosition.X
            local barWidth = SliderBar.AbsoluteSize.X
            local ratio = math.clamp((mouseX - barX) / barWidth, 0, 1)
            local value = min + ratio * (max - min)
            value = math.round(value * 10) / 10
            Fill.Size = UDim2.new(ratio, 0, 1, 0)
            Knob.Position = UDim2.new(ratio, -7, 0, -2)
            ValueLabel.Text = tostring(value)
            if callback then
                callback(value)
            end
        end
    end)
end

function StarClientGui:AddRGBPicker(tabName, funcName, defaultColor, callback)
    local TabFrame = self.Tabs[tabName]
    if not TabFrame then return end
    
    local RGBFrame = Instance.new("Frame")
    RGBFrame.Size = UDim2.new(0.8, 0, 0, 110)
    RGBFrame.Position = UDim2.new(0, 0, 0, 0)
    RGBFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    RGBFrame.BorderSizePixel = 1
    RGBFrame.BorderColor3 = Color3.fromRGB(50, 50, 50)
    RGBFrame.Parent = TabFrame
    
    local RGBCorner = Instance.new("UICorner")
    RGBCorner.CornerRadius = UDim.new(0, 4)
    RGBCorner.Parent = RGBFrame
    
    local RGBName = Instance.new("TextLabel")
    RGBName.Size = UDim2.new(1, -20, 0, 20)
    RGBName.Position = UDim2.new(0, 10, 0, 5)
    RGBName.BackgroundTransparency = 1
    RGBName.Text = funcName
    RGBName.TextColor3 = Color3.fromRGB(255, 255, 255)
    RGBName.TextSize = 14
    RGBName.Font = Enum.Font.SourceSans
    RGBName.TextXAlignment = Enum.TextXAlignment.Left
    RGBName.Parent = RGBFrame
    
    local ColorPreview = Instance.new("Frame")
    ColorPreview.Size = UDim2.new(0, 20, 0, 20)
    ColorPreview.Position = UDim2.new(1, -30, 0, 5)
    ColorPreview.BackgroundColor3 = defaultColor
    ColorPreview.BorderSizePixel = 1
    ColorPreview.BorderColor3 = Color3.fromRGB(50, 50, 50)
    ColorPreview.Parent = RGBFrame
    
    local ColorPreviewCorner = Instance.new("UICorner")
    ColorPreviewCorner.CornerRadius = UDim.new(0, 4)
    ColorPreviewCorner.Parent = ColorPreview
    
    local sliders = {
        {name = "Red", value = math.floor(defaultColor.R * 255), min = 0, max = 255},
        {name = "Green", value = math.floor(defaultColor.G * 255), min = 0, max = 255},
        {name = "Blue", value = math.floor(defaultColor.B * 255), min = 0, max = 255}
    }
    
    for i, slider in ipairs(sliders) do
        local SliderName = Instance.new("TextLabel")
        SliderName.Size = UDim2.new(0.3, 0, 0, 20)
        SliderName.Position = UDim2.new(0, 10, 0, 30 + (i - 1) * 25)
        SliderName.BackgroundTransparency = 1
        SliderName.Text = slider.name
        SliderName.TextColor3 = Color3.fromRGB(255, 255, 255)
        SliderName.TextSize = 12
        SliderName.Font = Enum.Font.SourceSans
        SliderName.TextXAlignment = Enum.TextXAlignment.Left
        SliderName.Parent = RGBFrame
        
        local ValueLabel = Instance.new("TextLabel")
        ValueLabel.Size = UDim2.new(0.3, 0, 0, 20)
        ValueLabel.Position = UDim2.new(0.7, 0, 0, 30 + (i - 1) * 25)
        ValueLabel.BackgroundTransparency = 1
        ValueLabel.Text = tostring(slider.value)
        ValueLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        ValueLabel.TextSize = 12
        ValueLabel.Font = Enum.Font.SourceSans
        ValueLabel.TextXAlignment = Enum.TextXAlignment.Right
        ValueLabel.Parent = RGBFrame
        
        local SliderBar = Instance.new("Frame")
        SliderBar.Size = UDim2.new(0.4, 0, 0, 10)
        SliderBar.Position = UDim2.new(0.3, 0, 0, 35 + (i - 1) * 25)
        SliderBar.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        SliderBar.Parent = RGBFrame
        
        local SliderBarCorner = Instance.new("UICorner")
        SliderBarCorner.CornerRadius = UDim.new(0, 4)
        SliderBarCorner.Parent = SliderBar
        
        local Fill = Instance.new("Frame")
        Fill.Size = UDim2.new(slider.value / 255, 0, 1, 0)
        Fill.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Fill.BorderSizePixel = 0
        Fill.Parent = SliderBar
        
        local FillCorner = Instance.new("UICorner")
        FillCorner.CornerRadius = UDim.new(0, 4)
        FillCorner.Parent = Fill
        
        local Knob = Instance.new("Frame")
        Knob.Size = UDim2.new(0, 14, 0, 14)
        Knob.Position = UDim2.new(slider.value / 255, -7, 0, -2)
        Knob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Knob.Parent = SliderBar
        
        local KnobCorner = Instance.new("UICorner")
        KnobCorner.CornerRadius = UDim.new(0, 7)
        KnobCorner.Parent = Knob
        
        local dragging = false
        Knob.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
            end
        end)
        
        UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end)
        
        UserInputService.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                local mouseX = input.Position.X
                local barX = SliderBar.AbsolutePosition.X
                local barWidth = SliderBar.AbsoluteSize.X
                local ratio = math.clamp((mouseX - barX) / barWidth, 0, 1)
                local value = math.floor(slider.min + ratio * (slider.max - slider.min))
                Fill.Size = UDim2.new(ratio, 0, 1, 0)
                Knob.Position = UDim2.new(ratio, -7, 0, -2)
                ValueLabel.Text = tostring(value)
                slider.value = value
                local color = Color3.fromRGB(sliders[1].value, sliders[2].value, sliders[3].value)
                ColorPreview.BackgroundColor3 = color
                if callback then
                    callback(color)
                end
            end
        end)
    end
end

function StarClientGui:AddMultiOption(tabName, funcName, options, callback)
    local TabFrame = self.Tabs[tabName]
    if not TabFrame then return end
    
    local MultiFrame = Instance.new("Frame")
    MultiFrame.Size = UDim2.new(0.8, 0, 0, 50 + (#options - 1) * 25)
    MultiFrame.Position = UDim2.new(0, 0, 0, 0)
    MultiFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    MultiFrame.BorderSizePixel = 1
    MultiFrame.BorderColor3 = Color3.fromRGB(50, 50, 50)
    MultiFrame.Parent = TabFrame
    
    local MultiCorner = Instance.new("UICorner")
    MultiCorner.CornerRadius = UDim.new(0, 4)
    MultiCorner.Parent = MultiFrame
    
    local MultiName = Instance.new("TextLabel")
    MultiName.Size = UDim2.new(1, -20, 0, 20)
    MultiName.Position = UDim2.new(0, 10, 0, 5)
    MultiName.BackgroundTransparency = 1
    MultiName.Text = funcName
    MultiName.TextColor3 = Color3.fromRGB(255, 255, 255)
    MultiName.TextSize = 14
    MultiName.Font = Enum.Font.SourceSans
    MultiName.TextXAlignment = Enum.TextXAlignment.Left
    MultiName.Parent = MultiFrame
    
    local OptionsContainer = Instance.new("Frame")
    OptionsContainer.Size = UDim2.new(1, -20, 0, #options * 25)
    OptionsContainer.Position = UDim2.new(0, 10, 0, 30)
    OptionsContainer.BackgroundTransparency = 1
    OptionsContainer.Parent = MultiFrame
    
    local UIGridLayout = Instance.new("UIGridLayout")
    UIGridLayout.CellSize = UDim2.new(0, 80, 0, 20)
    UIGridLayout.CellPadding = UDim2.new(0, 5, 0, 5)
    UIGridLayout.Parent = OptionsContainer
    
    local selectedOptions = {}
    for _, option in ipairs(options) do
        local OptionButton = Instance.new("TextButton")
        OptionButton.Size = UDim2.new(0, 80, 0, 20)
        OptionButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
        OptionButton.Text = option
        OptionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        OptionButton.TextSize = 12
        OptionButton.Font = Enum.Font.SourceSans
        OptionButton.Parent = OptionsContainer
        
        local OptionCorner = Instance.new("UICorner")
        OptionCorner.CornerRadius = UDim.new(0, 4)
        OptionCorner.Parent = OptionButton
        
        OptionButton.MouseButton1Click:Connect(function()
            if table.find(selectedOptions, option) then
                OptionButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
                table.remove(selectedOptions, table.find(selectedOptions, option))
            else
                OptionButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
                table.insert(selectedOptions, option)
            end
            if callback then
                callback(selectedOptions)
            end
        end)
    end
end

function StarClientGui:Destroy()
    self.ScreenGui:Destroy()
end

function StarClientGui:ShowNotification(funcName, enabled)
    local notification = Instance.new("TextLabel")
    notification.Size = UDim2.new(0, 200, 0, 50)
    notification.Position = UDim2.new(1, -220, 1, -70) -- Право нижний угол, скрыт
    notification.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    notification.Text = funcName .. " was "
    notification.TextColor3 = Color3.fromRGB(255, 255, 255)
    notification.TextSize = 14
    notification.Font = Enum.Font.SourceSans
    notification.Parent = self.ScreenGui
    notification.BorderSizePixel = 0
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 4)
    corner.Parent = notification
    
    local statusText = Instance.new("TextLabel")
    statusText.Size = UDim2.new(0, 100, 1, 0)
    statusText.Position = UDim2.new(0.5, 0, 0, 0)
    statusText.BackgroundTransparency = 1
    statusText.Text = enabled and "enable" or "disable"
    statusText.TextColor3 = enabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    statusText.TextSize = 14
    statusText.Font = Enum.Font.SourceSans
    statusText.Parent = notification
    
    -- Анимация появления слева направо
    local enterTween = TweenService:Create(notification, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Position = UDim2.new(1, -220, 1, -70)})
    enterTween:Play()
    
    wait(2)
    
    -- Анимация ухода справа налево
    local exitTween = TweenService:Create(notification, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {Position = UDim2.new(1, 20, 1, -70)})
    exitTween:Play()
    exitTween.Completed:Connect(function()
        notification:Destroy()
    end)
end

return StarClientGui
