-- StarClient ClickGui Library
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

-- Main ClickGui Module
local StarClientGui = {}
StarClientGui.__index = StarClientGui

function StarClientGui.new()
    local self = setmetatable({}, StarClientGui)
    
    self.ScreenGui = Instance.new("ScreenGui")
    self.ScreenGui.Name = "StarClientGui"
    self.ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    self.ScreenGui.Enabled = false
    self.ScreenGui.ResetOnSpawn = false
    
    self.ArrayListGui = Instance.new("ScreenGui")
    self.ArrayListGui.Name = "StarClientArrayList"
    self.ArrayListGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    self.ArrayListGui.ResetOnSpawn = false
    
    self.MainFrame = Instance.new("Frame")
    self.MainFrame.Size = UDim2.new(0, 600, 0, 400)
    self.MainFrame.Position = UDim2.new(0.5, -300, 0.5, -200)
    self.MainFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    self.MainFrame.BorderSizePixel = 0
    self.MainFrame.ClipsDescendants = true
    self.MainFrame.Parent = self.ScreenGui
    
    local MainCorner = Instance.new("UICorner")
    MainCorner.CornerRadius = UDim.new(0, 8)
    MainCorner.Parent = self.MainFrame
    
    self.Sidebar = Instance.new("Frame")
    self.Sidebar.Size = UDim2.new(0, 150, 1, 0)
    self.Sidebar.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    self.Sidebar.BorderSizePixel = 0
    self.Sidebar.Parent = self.MainFrame
    
    local SidebarCorner = Instance.new("UICorner")
    SidebarCorner.CornerRadius = UDim.new(0, 8)
    SidebarCorner.Parent = self.Sidebar
    
    local SidebarMask = Instance.new("Frame")
    SidebarMask.Size = UDim2.new(0, 5, 1, 0)
    SidebarMask.Position = UDim2.new(1, -5, 0, 0)
    SidebarMask.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    SidebarMask.BorderSizePixel = 0
    SidebarMask.Parent = self.Sidebar
    
    self.Title = Instance.new("TextLabel")
    self.Title.Size = UDim2.new(1, 0, 0, 30)
    self.Title.BackgroundTransparency = 1
    self.Title.Text = "StarClient"
    self.Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    self.Title.TextSize = 32
    self.Title.Font = Enum.Font.SourceSansBold
    self.Title.Parent = self.Sidebar
    
    local dragging, dragStart, startPos
    self.Title.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = self.MainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            self.MainFrame.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)
    
    self.ArrayListFrame = Instance.new("Frame")
    self.ArrayListFrame.Size = UDim2.new(0, 150, 0, 0)
    self.ArrayListFrame.Position = UDim2.new(0, 10, 0, 10)
    self.ArrayListFrame.BackgroundTransparency = 1
    self.ArrayListFrame.BorderSizePixel = 0
    self.ArrayListFrame.Parent = self.ArrayListGui
    self.ArrayListFrame.Name = "ArrayListFrame"

    local ArrayListContainer = Instance.new("Frame")
    ArrayListContainer.Size = UDim2.new(1, 0, 1, 0)
    ArrayListContainer.BackgroundTransparency = 1
    ArrayListContainer.Parent = self.ArrayListFrame
    ArrayListContainer.Name = "ArrayListContainer"

    local ArrayListLayout = Instance.new("UIListLayout")
    ArrayListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    ArrayListLayout.Padding = UDim.new(0, 5)
    ArrayListLayout.Parent = ArrayListContainer

    ArrayListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        self.ArrayListFrame.Size = UDim2.new(0, 150, 0, ArrayListLayout.AbsoluteContentSize.Y)
    end)

    local arrayDragging, arrayDragStart, arrayStartPos
    self.ArrayListFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            arrayDragging = true
            arrayDragStart = input.Position
            arrayStartPos = self.ArrayListFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    arrayDragging = false
                end
            end)
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if arrayDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - arrayDragStart
            self.ArrayListFrame.Position = UDim2.new(
                arrayStartPos.X.Scale,
                arrayStartPos.X.Offset + delta.X,
                arrayStartPos.Y.Scale,
                arrayStartPos.Y.Offset + delta.Y
            )
        end
    end)
    
    self.Tabs = {}
    self.TabButtons = {}
    self.CurrentTab = nil
    self.Functions = {}
    self.Groups = {}
    self.EnabledFunctions = {}

    local tabNames = {"Combat", "Movement", "Visuals", "Exploits", "Utils"}
    for i, tabName in ipairs(tabNames) do
        local TabButton = Instance.new("TextButton")
        TabButton.Size = UDim2.new(1, 0, 0, 30)
        TabButton.Position = UDim2.new(0, 0, 0, 30 + (i - 1) * 35)
        TabButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        TabButton.Text = tabName
        TabButton.TextColor3 = Color3.fromRGB(200, 200, 200)
        TabButton.TextSize = 14
        TabButton.Font = Enum.Font.SourceSans
        TabButton.BorderSizePixel = 1
        TabButton.BorderColor3 = Color3.fromRGB(50, 50, 50)
        TabButton.Parent = self.Sidebar
        
        local TabFrame = Instance.new("ScrollingFrame")
        TabFrame.Size = UDim2.new(1, -150, 1, 0)
        TabFrame.Position = UDim2.new(0, 150, 0, 0)
        TabFrame.BackgroundTransparency = 1
        TabFrame.BorderSizePixel = 0
        TabFrame.ScrollBarThickness = 4
        TabFrame.ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255)
        TabFrame.Visible = false
        TabFrame.Parent = self.MainFrame
        
        local UIListLayout = Instance.new("UIListLayout")
        UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        UIListLayout.Padding = UDim.new(0, 5)
        UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        UIListLayout.Parent = TabFrame
        
        local UIPadding = Instance.new("UIPadding")
        UIPadding.PaddingLeft = UDim.new(0, 10)
        UIPadding.PaddingRight = UDim.new(0, 10)
        UIPadding.Parent = TabFrame
        
        self.Tabs[tabName] = TabFrame
        self.TabButtons[tabName] = TabButton
        self.Functions[tabName] = {}
        self.Groups[tabName] = {}
        
        TabButton.MouseButton1Click:Connect(function()
            if self.CurrentTab ~= tabName then
                if self.CurrentTab then
                    self.Tabs[self.CurrentTab].Visible = false
                    self.TabButtons[self.CurrentTab].BackgroundColor3 = Color3.fromRGB(30, 30, 30)
                end
                self.CurrentTab = tabName
                TabFrame.Visible = true
                local tween = TweenService:Create(
                    TabButton,
                    TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                    {BackgroundColor3 = Color3.fromRGB(50, 50, 50)}
                )
                tween:Play()
            end
        end)
    end
    
    UserInputService.InputBegan:Connect(function(input)
        if input.KeyCode == Enum.KeyCode.Insert then
            self.ScreenGui.Enabled = not self.ScreenGui.Enabled
        end
    end)
    
    return self
end

function StarClientGui:AddGroup(tabName, groupName)
    local TabFrame = self.Tabs[tabName]
    if not TabFrame then return end
    
    local firstFunction = #self.Functions[tabName] == 0
    local GroupFrame = Instance.new("Frame")
    GroupFrame.Name = groupName .. "Group"
    GroupFrame.Size = UDim2.new(0.8, 0, 0, 50)
    GroupFrame.Position = UDim2.new(0, 0, 0, firstFunction and 10 or 0)
    GroupFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    GroupFrame.BorderSizePixel = 1
    GroupFrame.BorderColor3 = Color3.fromRGB(50, 50, 50)
    GroupFrame.Parent = TabFrame
    
    local GroupCorner = Instance.new("UICorner")
    GroupCorner.CornerRadius = UDim.new(0, 4)
    GroupCorner.Parent = GroupFrame
    
    local GroupContainer = Instance.new("Frame")
    GroupContainer.Size = UDim2.new(1, -10, 0, 0)
    GroupContainer.Position = UDim2.new(0, 5, 0, 5)
    GroupContainer.BackgroundTransparency = 1
    GroupContainer.Parent = GroupFrame
    
    local GroupUIListLayout = Instance.new("UIListLayout")
    GroupUIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    GroupUIListLayout.Padding = UDim.new(0, 5)
    GroupUIListLayout.Parent = GroupContainer
    
    GroupUIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        GroupFrame.Size = UDim2.new(0.8, 0, 0, GroupUIListLayout.AbsoluteContentSize.Y + 10)
        TabFrame.CanvasSize = UDim2.new(0, 0, 0, TabFrame.UIListLayout.AbsoluteContentSize.Y + 10)
    end)
    
    if not self.Groups[tabName][groupName] then
        self.Groups[tabName][groupName] = GroupContainer
    end
    
    table.insert(self.Functions[tabName], groupName)
    return GroupContainer
end

function StarClientGui:AddFunction(tabName, funcName, callback, groupName, isSubFunction)
    local parentFrame
    if groupName then
        parentFrame = self.Groups[tabName][groupName]
        if not parentFrame then
            parentFrame = self:AddGroup(tabName, groupName)
        end
    else
        parentFrame = self.Tabs[tabName]
        if not parentFrame then return end
    end
    
    local FuncFrame = Instance.new("Frame")
    FuncFrame.Name = funcName .. "Frame"
    FuncFrame.Size = UDim2.new(1, 0, 0, 50)
    FuncFrame.BackgroundTransparency = 1
    FuncFrame.Parent = parentFrame
    
    local FuncNameLabel = Instance.new("TextLabel")
    FuncNameLabel.Size = UDim2.new(0.4, 0, 0, 20)
    FuncNameLabel.Position = UDim2.new(0, 10, 0, 5)
    FuncNameLabel.BackgroundTransparency = 1
    FuncNameLabel.Text = funcName
    FuncNameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    FuncNameLabel.TextSize = 14
    FuncNameLabel.Font = Enum.Font.SourceSans
    FuncNameLabel.TextXAlignment = Enum.TextXAlignment.Left
    FuncNameLabel.Parent = FuncFrame
    
    local BindLabel = Instance.new("TextLabel")
    BindLabel.Size = UDim2.new(0.2, 0, 0, 20)
    BindLabel.Position = UDim2.new(0.65, 0, 0, 5)
    BindLabel.BackgroundTransparency = 1
    BindLabel.Text = "Bind:"
    BindLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    BindLabel.TextSize = 14
    BindLabel.Font = Enum.Font.SourceSans
    BindLabel.TextXAlignment = Enum.TextXAlignment.Left
    BindLabel.Parent = FuncFrame
    
    local BindButton = Instance.new("TextButton")
    BindButton.Name = "BindButton"
    BindButton.Size = UDim2.new(0.15, 0, 0, 20)
    BindButton.Position = UDim2.new(0.85, 0, 0, 5)
    BindButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    BindButton.Text = "None"
    BindButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    BindButton.TextSize = 12
    BindButton.Font = Enum.Font.SourceSans
    BindButton.Parent = FuncFrame
    
    local BindCorner = Instance.new("UICorner")
    BindCorner.CornerRadius = UDim.new(0, 4)
    BindCorner.Parent = BindButton
    
    local Toggle = Instance.new("TextButton")
    Toggle.Name = "Toggle"
    Toggle.Size = UDim2.new(0, 20, 0, 20)
    Toggle.Position = UDim2.new(0.4, 0, 0, 5)
    Toggle.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    Toggle.Text = ""
    Toggle.Parent = FuncFrame
    
    local ToggleCorner = Instance.new("UICorner")
    ToggleCorner.CornerRadius = UDim.new(0, 4)
    ToggleCorner.Parent = Toggle
    
    local SubContainer = Instance.new("Frame")
    SubContainer.Size = UDim2.new(1, -10, 0, 0)
    SubContainer.Position = UDim2.new(0, 5, 0, 30)
    SubContainer.BackgroundTransparency = 1
    SubContainer.Visible = false
    SubContainer.Parent = FuncFrame
    
    local SubUIListLayout = Instance.new("UIListLayout")
    SubUIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    SubUIListLayout.Padding = UDim.new(0, 5)
    SubUIListLayout.Parent = SubContainer
    
    local enabled = false
    local bindKey = nil

    local function updateArrayList()
        for _, child in ipairs(self.ArrayListFrame.ArrayListContainer:GetChildren()) do
            if child:IsA("Frame") then
                child:Destroy()
            end
        end

        local sortedFunctions = {}
        for name, _ in pairs(self.EnabledFunctions) do
            table.insert(sortedFunctions, name)
        end
        table.sort(sortedFunctions, function(a, b)
            return #a > #b
        end)

        for i, name in ipairs(sortedFunctions) do
            local LabelFrame = Instance.new("Frame")
            LabelFrame.Size = UDim2.new(0, 140, 0, 24)
            LabelFrame.BackgroundTransparency = 0
            LabelFrame.Parent = self.ArrayListFrame.ArrayListContainer

            local LabelGradient = Instance.new("UIGradient")
            LabelGradient.Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, Color3.fromRGB(50, 50, 50)),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(20, 20, 20))
            })
            LabelGradient.Parent = LabelFrame

            local LabelCorner = Instance.new("UICorner")
            LabelCorner.CornerRadius = UDim.new(0, 6)
            LabelCorner.Parent = LabelFrame

            local LabelStroke = Instance.new("UIStroke")
            LabelStroke.Color = Color3.fromRGB(255, 255, 255)
            LabelStroke.Thickness = 1
            LabelStroke.Transparency = 0.3
            LabelStroke.Parent = LabelFrame

            local ArrayLabel = Instance.new("TextLabel")
            ArrayLabel.Size = UDim2.new(1, 0, 1, 0)
            ArrayLabel.BackgroundTransparency = 1
            ArrayLabel.Text = name
            ArrayLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            ArrayLabel.TextSize = 14
            ArrayLabel.Font = Enum.Font.SourceSansBold
            ArrayLabel.TextXAlignment = Enum.TextXAlignment.Center
            ArrayLabel.TextStrokeTransparency = 0.5
            ArrayLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
            ArrayLabel.Parent = LabelFrame
        end
    end

    Toggle.MouseButton1Click:Connect(function()
        enabled = not enabled
        Toggle.BackgroundColor3 = enabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(100, 100, 100)
        SubContainer.Visible = enabled
        FuncFrame.Size = enabled and UDim2.new(1, 0, 0, 30 + SubContainer.UIListLayout.AbsoluteContentSize.Y + 10) or UDim2.new(1, 0, 0, 50)
        if callback then
            callback(enabled)
        end
        if enabled then
            self.EnabledFunctions[funcName] = true
        else
            self.EnabledFunctions[funcName] = nil
        end
        updateArrayList()
    end)

    BindButton.MouseButton1Click:Connect(function()
        BindButton.Text = "..."
        local connection
        connection = UserInputService.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.Keyboard then
                bindKey = input.KeyCode
                BindButton.Text = bindKey.Name
                connection:Disconnect()
            end
        end)
        wait(1)
        if BindButton.Text == "..." then
            BindButton.Text = "None"
            bindKey = nil
            connection:Disconnect()
        end
    end)

    UserInputService.InputBegan:Connect(function(input)
        if bindKey and input.KeyCode == bindKey then
            enabled = not enabled
            Toggle.BackgroundColor3 = enabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(100, 100, 100)
            SubContainer.Visible = enabled
            FuncFrame.Size = enabled and UDim2.new(1, 0, 0, 30 + SubContainer.UIListLayout.AbsoluteContentSize.Y + 10) or UDim2.new(1, 0, 0, 50)
            if callback then
                callback(enabled)
            end
            if enabled then
                self.EnabledFunctions[funcName] = true
            else
                self.EnabledFunctions[funcName] = nil
            end
            updateArrayList()
        elseif input.KeyCode == Enum.KeyCode.Delete and BindButton then
            bindKey = nil
            BindButton.Text = "None"
        end
    end)

    if not groupName then
        table.insert(self.Functions[tabName], funcName)
    end
    return {Toggle = Toggle, BindButton = BindButton}
end

function StarClientGui:AddSlider(tabName, funcName, min, max, default, callback, groupName, isSubFunction)
    local parentFrame
    if groupName then
        parentFrame = self.Groups[tabName][groupName]
        if not parentFrame then
            parentFrame = self:AddGroup(tabName, groupName)
        end
    else
        parentFrame = self.Tabs[tabName]
        if not parentFrame then return end
    end
    
    local SliderFrame = Instance.new("Frame")
    SliderFrame.Name = funcName .. "Frame"
    SliderFrame.Size = UDim2.new(1, 0, 0, 50)
    SliderFrame.BackgroundTransparency = 1
    SliderFrame.Parent = parentFrame
    
    local SliderName = Instance.new("TextLabel")
    SliderName.Size = UDim2.new(0.7, 0, 0, 20)
    SliderName.Position = UDim2.new(0, isSubFunction and 20 or 10, 0, 5)
    SliderName.BackgroundTransparency = 1
    SliderName.Text = funcName
    SliderName.TextColor3 = Color3.fromRGB(255, 255, 255)
    SliderName.TextSize = 14
    SliderName.Font = Enum.Font.SourceSans
    SliderName.TextXAlignment = Enum.TextXAlignment.Left
    SliderName.Parent = SliderFrame
    
    local ValueLabel = Instance.new("TextLabel")
    ValueLabel.Size = UDim2.new(0.3, 0, 0, 20)
    ValueLabel.Position = UDim2.new(0.7, 0, 0, 5)
    ValueLabel.BackgroundTransparency = 1
    ValueLabel.Text = tostring(default)
    ValueLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    ValueLabel.TextSize = 14
    ValueLabel.Font = Enum.Font.SourceSans
    ValueLabel.TextXAlignment = Enum.TextXAlignment.Right
    ValueLabel.Parent = SliderFrame
    
    local SliderBar = Instance.new("Frame")
    SliderBar.Size = UDim2.new(1, -20, 0, 10)
    SliderBar.Position = UDim2.new(0, 10, 0, 30)
    SliderBar.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    SliderBar.Parent = SliderFrame
    
    local SliderBarCorner = Instance.new("UICorner")
    SliderBarCorner.CornerRadius = UDim.new(0, 4)
    SliderBarCorner.Parent = SliderBar
    
    local Fill = Instance.new("Frame")
    Fill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
    Fill.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Fill.BorderSizePixel = 0
    Fill.Parent = SliderBar
    
    local FillCorner = Instance.new("UICorner")
    FillCorner.CornerRadius = UDim.new(0, 4)
    FillCorner.Parent = Fill
    
    local Knob = Instance.new("Frame")
    Knob.Size = UDim2.new(0, 14, 0, 14)
    Knob.Position = UDim2.new((default - min) / (max - min), -7, 0, -2)
    Knob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Knob.Parent = SliderBar
    
    local KnobCorner = Instance.new("UICorner")
    KnobCorner.CornerRadius = UDim.new(0, 7)
    KnobCorner.Parent = Knob
    
    local dragging = false
    PERFORMANCE("Slider drag handler setup")
    Knob.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local mouseX = input.Position.X
            local barX = SliderBar.AbsolutePosition.X
            local barWidth = SliderBar.AbsoluteSize.X
            local ratio = math.clamp((mouseX - barX) / barWidth, 0, 1)
            local value = min + ratio * (max - min)
            value = math.round(value * 10) / 10
            Fill.Size = UDim2.new(ratio, 0, 1, 0)
            Knob.Position = UDim2.new(ratio, -7, 0, -2)
            ValueLabel.Text = tostring(value)
            if callback then
                callback(value)
            end
        end
    end)
    
    if not groupName then
        table.insert(self.Functions[tabName], funcName)
    end
end

function StarClientGui:AddRGBPicker(tabName, funcName, defaultColor, callback, groupName, isSubFunction)
    local parentFrame
    if groupName then
        parentFrame = self.Groups[tabName][groupName]
        if not parentFrame then
            parentFrame = self:AddGroup(tabName, groupName)
        end
    else
        parentFrame = self.Tabs[tabName]
        if not parentFrame then return end
    end
    
    local RGBFrame = Instance.new("Frame")
    RGBFrame.Name = funcName .. "Frame"
    RGBFrame.Size = UDim2.new(1, 0, 0, 110)
    RGBFrame.BackgroundTransparency = 1
    RGBFrame.Parent = parentFrame
    
    local RGBName = Instance.new("TextLabel")
    RGBName.Size = UDim2.new(1, -20, 0, 20)
    RGBName.Position = UDim2.new(0, isSubFunction and 20 or 10, 0, 5)
    RGBName.BackgroundTransparency = 1
    RGBName.Text = funcName
    RGBName.TextColor3 = Color3.fromRGB(255, 255, 255)
    RGBName.TextSize = 14
    RGBName.Font = Enum.Font.SourceSans
    RGBName.TextXAlignment = Enum.TextXAlignment.Left
    RGBName.Parent = RGBFrame
    
    local ColorPreview = Instance.new("Frame")
    ColorPreview.Size = UDim2.new(0, 20, 0, 20)
    ColorPreview.Position = UDim2.new(1, -30, 0, 5)
    ColorPreview.BackgroundColor3 = defaultColor
    ColorPreview.BorderSizePixel = 1
    ColorPreview.BorderColor3 = Color3.fromRGB(50, 50, 50)
    ColorPreview.Parent = RGBFrame
    
    local ColorPreviewCorner = Instance.new("UICorner")
    ColorPreviewCorner.CornerRadius = UDim.new(0, 4)
    ColorPreviewCorner.Parent = ColorPreview
    
    local sliders = {
        {name = "Red", value = math.floor(defaultColor.R * 255), min = 0, max = 255},
        {name = "Green", value = math.floor(defaultColor.G * 255), min = 0, max = 255},
        {name = "Blue", value = math.floor(defaultColor.B * 255), min = 0, max = 255}
    }
    
    for i, slider in ipairs(sliders) do
        local SliderName = Instance.new("TextLabel")
        SliderName.Size = UDim2.new(0.3, 0, 0, 20)
        SliderName.Position = UDim2.new(0, isSubFunction and 30 or 20, 0, 30 + (i - 1) * 25)
        SliderName.BackgroundTransparency = 1
        SliderName.Text = slider.name
        SliderName.TextColor3 = Color3.fromRGB(255, 255, 255)
        SliderName.TextSize = 12
        SliderName.Font = Enum.Font.SourceSans
        SliderName.TextXAlignment = Enum.TextXAlignment.Left
        SliderName.Parent = RGBFrame
        
        local ValueLabel = Instance.new("TextLabel")
        ValueLabel.Size = UDim2.new(0.3, 0, 0, 20)
        ValueLabel.Position = UDim2.new(0.7, 0, 0, 30 + (i - 1) * 25)
        ValueLabel.BackgroundTransparency = 1
        ValueLabel.Text = tostring(slider.value)
        ValueLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        ValueLabel.TextSize = 12
        ValueLabel.Font = Enum.Font.SourceSans
        ValueLabel.TextXAlignment = Enum.TextXAlignment.Right
        ValueLabel.Parent = RGBFrame
        
        local SliderBar = Instance.new("Frame")
        SliderBar.Size = UDim2.new(0.4, 0, 0, 10)
        SliderBar.Position = UDim2.new(0.3, 0, 0, 35 + (i - 1) * 25)
        SliderBar.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        SliderBar.Parent = RGBFrame
        
        local SliderBarCorner = Instance.new("UICorner")
        SliderBarCorner.CornerRadius = UDim.new(0, 4)
        SliderBarCorner.Parent = SliderBar
        
        local Fill = Instance.new("Frame")
        Fill.Size = UDim2.new(slider.value / 255, 0, 1, 0)
        Fill.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Fill.BorderSizePixel = 0
        Fill.Parent = SliderBar
        
        local FillCorner = Instance.new("UICorner")
        FillCorner.CornerRadius = UDim.new(0, 4)
        FillCorner.Parent = Fill
        
        local Knob = Instance.new("Frame")
        Knob.Size = UDim2.new(0, 14, 0, 14)
        Knob.Position = UDim2.new(slider.value / 255, -7, 0, -2)
        Knob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Knob.Parent = SliderBar
        
        local KnobCorner = Instance.new("UICorner")
        KnobCorner.CornerRadius = UDim.new(0, 7)
        KnobCorner.Parent = Knob
        
        local dragging = false
        Knob.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
            end
        end)
        
        UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end)
        
        UserInputService.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                local mouseX = input.Position.X
                local barX = SliderBar.AbsolutePosition.X
                local barWidth = SliderBar.AbsoluteSize.X
                local ratio = math.clamp((mouseX - barX) / barWidth, 0, 1)
                local value = math.floor(slider.min + ratio * (slider.max - slider.min))
                Fill.Size = UDim2.new(ratio, 0, 1, 0)
                Knob.Position = UDim2.new(ratio, -7, 0, -2)
                ValueLabel.Text = tostring(value)
                slider.value = value
                local color = Color3.fromRGB(sliders[1].value, sliders[2].value, sliders[3].value)
                ColorPreview.BackgroundColor3 = color
                if callback then
                    callback(color)
                end
            end
        end)
    end
    
    if not groupName then
        table.insert(self.Functions[tabName], funcName)
    end
end

function StarClientGui:AddMultiOption(tabName, funcName, options, callback, groupName, isSubFunction)
    local parentFrame
    if groupName then
        parentFrame = self.Groups[tabName][groupName]
        if not parentFrame then
            parentFrame = self:AddGroup(tabName, groupName)
        end
    else
        parentFrame = self.Tabs[tabName]
        if not parentFrame then return end
    end
    
    local MultiFrame = Instance.new("Frame")
    MultiFrame.Name = funcName .. "Frame"
    MultiFrame.Size = UDim2.new(1, 0, 0, 50 + (#options - 1) * 25)
    MultiFrame.BackgroundTransparency = 1
    MultiFrame.Parent = parentFrame
    
    local MultiName = Instance.new("TextLabel")
    MultiName.Size = UDim2.new(1, -20, 0, 20)
    MultiName.Position = UDim2.new(0, isSubFunction and 20 or 10, 0, 5)
    MultiName.BackgroundTransparency = 1
    MultiName.Text = funcName
    MultiName.TextColor3 = Color3.fromRGB(255, 255, 255)
    MultiName.TextSize = 14
    MultiName.Font = Enum.Font.SourceSans
    MultiName.TextXAlignment = Enum.TextXAlignment.Left
    MultiName.Parent = MultiFrame
    
    local OptionsContainer = Instance.new("Frame")
    OptionsContainer.Size = UDim2.new(1, -20, 0, #options * 25)
    OptionsContainer.Position = UDim2.new(0, 10, 0, 30)
    OptionsContainer.BackgroundTransparency = 1
    OptionsContainer.Parent = MultiFrame
    
    local UIGridLayout = Instance.new("UIGridLayout")
    UIGridLayout.CellSize = UDim2.new(0, 80, 0, 20)
    UIGridLayout.CellPadding = UDim2.new(0, 5, 0, 5)
    UIGridLayout.Parent = OptionsContainer
    
    local selectedOptions = {}
    for _, option in ipairs(options) do
        local OptionButton = Instance.new("TextButton")
        OptionButton.Size = UDim2.new(0, 80, 0, 20)
        OptionButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
        OptionButton.Text = option
        OptionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        OptionButton.TextSize = 12
        OptionButton.Font = Enum.Font.SourceSans
        OptionButton.Parent = OptionsContainer
        
        local OptionCorner = Instance.new("UICorner")
        OptionCorner.CornerRadius = UDim.new(0, 4)
        OptionCorner.Parent = OptionButton
        
        OptionButton.MouseButton1Click:Connect(function()
            if table.find(selectedOptions, option) then
                OptionButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
                table.remove(selectedOptions, table.find(selectedOptions, option))
            else
                OptionButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
                table.insert(selectedOptions, option)
            end
            if callback then
                callback(selectedOptions)
            end
        end)
    end
    
    if not groupName then
        table.insert(self.Functions[tabName], funcName)
    end
end

function StarClientGui:Destroy()
    self.ScreenGui:Destroy()
    self.ArrayListGui:Destroy()
end

return StarClientGui
