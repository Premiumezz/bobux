-- StarClient Notifications Library
local TweenService = game:GetService("TweenService")

local Notifications = {}
Notifications.__index = Notifications

function Notifications.new(screenGui)
    local self = setmetatable({}, Notifications)
    self.ScreenGui = screenGui or Instance.new("ScreenGui")
    self.ScreenGui.Name = "StarClientNotifications"
    self.ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    self.ScreenGui.ResetOnSpawn = false
    self.ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    self.Notifications = {}
    self.IsUnhooking = false
    return self
end

function Notifications:ShowNotification(text, color)
    if self.IsUnhooking then return end
    local NotificationFrame = Instance.new("Frame")
    NotificationFrame.Size = UDim2.new(0, 300, 0, 60)
    NotificationFrame.Position = UDim2.new(1, 0, 1, -70 - (#self.Notifications * 70))
    NotificationFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    NotificationFrame.BorderSizePixel = 0
    NotificationFrame.ZIndex = 10
    NotificationFrame.Parent = self.ScreenGui
    NotificationFrame.ClipsDescendants = true

    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 8)
    Corner.Parent = NotificationFrame

    local Border = Instance.new("UIStroke")
    Border.Color = color or Color3.fromRGB(255, 255, 255)
    Border.Thickness = 2
    Border.Parent = NotificationFrame

    local Title = Instance.new("TextLabel")
    Title.Size = UDim2.new(1, -20, 1, 0)
    Title.Position = UDim2.new(0, 10, 0, 0)
    Title.BackgroundTransparency = 1
    Title.Text = text
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.TextSize = 20
    Title.Font = Enum.Font.SourceSansBold
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.TextTransparency = 0
    Title.ZIndex = 11
    Title.Parent = NotificationFrame

    local Shadow = Instance.new("UIStroke")
    Shadow.Color = Color3.fromRGB(0, 0, 0)
    Shadow.Thickness = 1
    Shadow.Transparency = 0.5
    Shadow.Parent = NotificationFrame

    table.insert(self.Notifications, NotificationFrame)

    local tweenIn = TweenService:Create(
        NotificationFrame,
        TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        {Position = UDim2.new(1, -310, 1, -70 - (#self.Notifications * 70))}
    )
    tweenIn:Play()

    spawn(function()
        wait(4)
        local tweenOut = TweenService:Create(
            NotificationFrame,
            TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.In),
            {Position = UDim2.new(1, 0, 1, -70 - (#self.Notifications * 70))}
        )
        tweenOut:Play()
        tweenOut.Completed:Connect(function()
            NotificationFrame:Destroy()
            local index = table.find(self.Notifications, NotificationFrame)
            if index then
                table.remove(self.Notifications, index)
            end
            for i, frame in ipairs(self.Notifications) do
                local tween = TweenService:Create(
                    frame,
                    TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                    {Position = UDim2.new(1, -310, 1, -70 - (i * 70))}
                )
                tween:Play()
            end
        end)
    end)
end

function Notifications:Destroy()
    self.IsUnhooking = true
    for _, frame in ipairs(self.Notifications) do
        frame:Destroy()
    end
    self.Notifications = {}
    self.ScreenGui:Destroy()
end

return Notifications
