local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local TextService = game:GetService("TextService")

-- Notification System
local notifications = {}
local function showNotification(message, isEnabled)
    local NotificationGui = Instance.new("ScreenGui")
    NotificationGui.Name = "FunctionNotification"
    NotificationGui.Parent = game.CoreGui

    local NotificationFrame = Instance.new("Frame")
    NotificationFrame.Size = UDim2.new(0, 200, 0, 50)
    NotificationFrame.Position = UDim2.new(1, 10, 1, -110 - (#notifications * 60))
    NotificationFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    NotificationFrame.BorderSizePixel = 0
    NotificationFrame.Parent = NotificationGui

    local NotificationCorner = Instance.new("UICorner")
    NotificationCorner.CornerRadius = UDim.new(0, 6)
    NotificationCorner.Parent = NotificationFrame

    local NotificationLabel = Instance.new("TextLabel")
    NotificationLabel.Size = UDim2.new(1, -10, 1, -10)
    NotificationLabel.Position = UDim2.new(0, 5, 0, 5)
    NotificationLabel.BackgroundTransparency = 1
    NotificationLabel.Text = message
    NotificationLabel.TextColor3 = isEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    NotificationLabel.Font = Enum.Font.SourceSans
    NotificationLabel.TextSize = 14
    NotificationLabel.TextWrapped = true
    NotificationLabel.Parent = NotificationFrame

    table.insert(notifications, NotificationFrame)

    local tweenIn = TweenService:Create(NotificationFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Position = UDim2.new(1, -210, 1, -110 - (#notifications * 60))})
    tweenIn:Play()
    tweenIn.Completed:Wait()

    wait(2)

    local tweenOut = TweenService:Create(NotificationFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {Position = UDim2.new(1, 10, 1, -110 - (#notifications * 60))})
    tweenOut:Play()
    tweenOut.Completed:Wait()

    table.remove(notifications, 1)
    for i, notif in ipairs(notifications) do
        notif.Position = UDim2.new(1, -210, 1, -110 - (i * 60))
    end
    NotificationGui:Destroy()
end

-- Create ScreenGui
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "XenoGUI"
ScreenGui.Parent = game.CoreGui
ScreenGui.ResetOnSpawn = false

-- Create Main Frame
local MainFrame = Instance.new("Frame")
MainFrame.Size = UDim2.new(0, 500, 0, 300)
MainFrame.Position = UDim2.new(0.5, -250, 0.5, -150)
MainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
MainFrame.BorderSizePixel = 0
MainFrame.Visible = false
MainFrame.Parent = ScreenGui

local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0, 8)
UICorner.Parent = MainFrame

-- Create Top Bar
local TopBar = Instance.new("Frame")
TopBar.Size = UDim2.new(1, 0, 0, 30)
TopBar.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
TopBar.BorderSizePixel = 0
TopBar.Parent = MainFrame

local TopBarCorner = Instance.new("UICorner")
TopBarCorner.CornerRadius = UDim.new(0, 8)
TopBarCorner.Parent = TopBar

local TitleLabel = Instance.new("TextLabel")
TitleLabel.Size = UDim2.new(0, 200, 0, 30)
TitleLabel.Position = UDim2.new(0, 10, 0, 0)
TitleLabel.BackgroundTransparency = 1
TitleLabel.Text = "CrazyHueta"
TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TitleLabel.Font = Enum.Font.SourceSansBold
TitleLabel.TextSize = 18
TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
TitleLabel.Parent = TopBar

-- Make GUI Draggable
local dragging = false
local dragStartPos, startPos
TopBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStartPos = input.Position
        startPos = MainFrame.Position
    end
end)

TopBar.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Position - dragStartPos
        MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

-- Create Sidebar
local Sidebar = Instance.new("Frame")
Sidebar.Size = UDim2.new(0, 120, 0, 270)
Sidebar.Position = UDim2.new(0, 0, 0, 30)
Sidebar.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
Sidebar.BorderSizePixel = 0
Sidebar.Parent = MainFrame

local SidebarCorner = Instance.new("UICorner")
SidebarCorner.CornerRadius = UDim.new(0, 8)
SidebarCorner.Parent = Sidebar

local SidebarList = Instance.new("UIListLayout")
SidebarList.SortOrder = Enum.SortOrder.LayoutOrder
SidebarList.Padding = UDim.new(0, 10)
SidebarList.Parent = Sidebar

local SidebarPadding = Instance.new("UIPadding")
SidebarPadding.PaddingTop = UDim.new(0, 10)
SidebarPadding.PaddingLeft = UDim.new(0, 5)
SidebarPadding.PaddingRight = UDim.new(0, 5)
SidebarPadding.Parent = Sidebar

-- Create Content Area
local Content = Instance.new("Frame")
Content.Size = UDim2.new(0, 380, 0, 270)
Content.Position = UDim2.new(0, 120, 0, 30)
Content.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
Content.BorderSizePixel = 0
Content.Parent = MainFrame

local ContentCorner = Instance.new("UICorner")
ContentCorner.CornerRadius = UDim.new(0, 8)
ContentCorner.Parent = Content

-- ArrayList Implementation
local ArrayListGui = Instance.new("ScreenGui")
ArrayListGui.Name = "ArrayListGui"
ArrayListGui.Parent = game.CoreGui
ArrayListGui.ResetOnSpawn = false

local ArrayListFrame = Instance.new("Frame")
ArrayListFrame.Size = UDim2.new(0, 150, 0, 200)
ArrayListFrame.Position = UDim2.new(0, 10, 0.5, -100)
ArrayListFrame.BackgroundTransparency = 1
ArrayListFrame.BorderSizePixel = 0
ArrayListFrame.Parent = ArrayListGui

local ArrayListList = Instance.new("UIListLayout")
ArrayListList.SortOrder = Enum.SortOrder.LayoutOrder
ArrayListList.Padding = UDim.new(0, 5)
ArrayListList.Parent = ArrayListFrame

local ArrayListPadding = Instance.new("UIPadding")
ArrayListPadding.PaddingTop = UDim.new(0, 5)
ArrayListPadding.PaddingLeft = UDim.new(0, 5)
ArrayListPadding.PaddingRight = UDim.new(0, 5)
ArrayListPadding.Parent = ArrayListFrame

-- Make ArrayList Draggable
local arrayListDragging = false
local arrayListDragStartPos, arrayListStartPos
ArrayListFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        arrayListDragging = true
        arrayListDragStartPos = input.Position
        arrayListStartPos = ArrayListFrame.Position
    end
end)

ArrayListFrame.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        arrayListDragging = false
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if arrayListDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Position - arrayListDragStartPos
        ArrayListFrame.Position = UDim2.new(arrayListStartPos.X.Scale, arrayListStartPos.X.Offset + delta.X, arrayListStartPos.Y.Scale, arrayListStartPos.Y.Offset + delta.Y)
    end
end)

-- Gradient Animation for ArrayList Text
local enabledFunctions = {}
local isArrayListEnabled = false
local arrayListColor1 = Color3.fromRGB(0, 255, 50)
local arrayListColor2 = Color3.fromRGB(255, 0, 205)

local function updateArrayList()
    for _, child in pairs(ArrayListFrame:GetChildren()) do
        if child:IsA("TextLabel") then
            child:Destroy()
        end
    end

    local sortedFunctions = {}
    for funcName, _ in pairs(enabledFunctions) do
        local textBounds = TextService:GetTextSize(funcName, 16, Enum.Font.SourceSansBold, Vector2.new(math.huge, math.huge))
        table.insert(sortedFunctions, {name = funcName, width = textBounds.X})
    end
    if isArrayListEnabled then
        local textBounds = TextService:GetTextSize("ArrayList", 16, Enum.Font.SourceSansBold, Vector2.new(math.huge, math.huge))
        table.insert(sortedFunctions, {name = "ArrayList", width = textBounds.X})
    end
    table.sort(sortedFunctions, function(a, b) return a.width > b.width end)

    for _, func in ipairs(sortedFunctions) do
        local funcName = func.name
        local FuncLabel = Instance.new("TextLabel")
        local textBounds = TextService:GetTextSize(funcName, 16, Enum.Font.SourceSansBold, Vector2.new(math.huge, math.huge))
        FuncLabel.Size = UDim2.new(0, textBounds.X, 0, 20)
        FuncLabel.BackgroundTransparency = 1
        FuncLabel.Text = funcName
        FuncLabel.TextColor3 = arrayListColor1
        FuncLabel.Font = Enum.Font.SourceSansBold
        FuncLabel.TextSize = 16
        FuncLabel.TextXAlignment = Enum.TextXAlignment.Left
        FuncLabel.Parent = ArrayListFrame

        local gradient = Instance.new("UIGradient")
        gradient.Color = ColorSequence.new(arrayListColor1, arrayListColor2)
        gradient.Rotation = 0
        gradient.Parent = FuncLabel

        local tween = TweenService:Create(gradient, TweenInfo.new(2, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1, true), {Offset = Vector2.new(1, 0)})
        tween:Play()
    end
end

-- Tab Management
local Tabs = {}
local TabButtons = {}
local CurrentTab = nil

local function createTab(name)
    local TabButton = Instance.new("TextButton")
    TabButton.Size = UDim2.new(1, 0, 0, 40)
    TabButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    TabButton.Text = name
    TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    TabButton.Font = Enum.Font.SourceSansBold
    TabButton.TextSize = 18
    TabButton.BorderSizePixel = 0
    TabButton.Parent = Sidebar
    TabButton.LayoutOrder = #Tabs + 1

    local ButtonCorner = Instance.new("UICorner")
    ButtonCorner.CornerRadius = UDim.new(0, 6)
    ButtonCorner.Parent = TabButton

    local TabContent = Instance.new("ScrollingFrame")
    TabContent.Size = UDim2.new(1, -10, 1, -10)
    TabContent.Position = UDim2.new(0, 5, 0, 5)
    TabContent.BackgroundTransparency = 1
    TabContent.BorderSizePixel = 0
    TabContent.CanvasSize = UDim2.new(0, 0, 0, 0)
    TabContent.ScrollBarThickness = 4
    TabContent.Visible = false
    TabContent.Parent = Content

    local ContentList = Instance.new("UIListLayout")
    ContentList.SortOrder = Enum.SortOrder.LayoutOrder
    ContentList.Padding = UDim.new(0, 10)
    ContentList.Parent = TabContent

    ContentList.Changed:Connect(function()
        TabContent.CanvasSize = UDim2.new(0, 0, 0, ContentList.AbsoluteContentSize.Y + 10)
    end)

    Tabs[name] = TabContent
    TabButtons[name] = TabButton

    TabButton.MouseButton1Click:Connect(function()
        if CurrentTab ~= name then
            if CurrentTab then
                Tabs[CurrentTab].Visible = false
                TabButtons[CurrentTab].BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            end
            CurrentTab = name
            Tabs[name].Visible = true
            TabButtons[name].BackgroundColor3 = Color3.fromRGB(70, 70, 70)
        end
    end)
end

-- Create Tabs
for _, name in ipairs({"Combat", "Movement", "Visuals", "Exploits", "Utils"}) do
    createTab(name)
end

-- Function Module
local functionModules = {}
local function createFunctionModule(tabName, funcName, defaultBind, options)
    options = options or {}
    local sliders = options.sliders or {}
    local hasEspToggles = options.hasEspToggles or false
    local hasColorPicker = options.hasColorPicker or false
    local hasDualColorPicker = options.hasDualColorPicker or false
    local hasToggles = options.hasToggles or {}

    local height = 70
    for _ in pairs(sliders) do height = height + 40 end
    if hasEspToggles then height = height + 30 end
    if hasColorPicker then height = height + 60 end
    if hasDualColorPicker then height = height + 120 end
    for _ in pairs(hasToggles) do height = height + 30 end

    local FuncFrame = Instance.new("Frame")
    FuncFrame.Size = UDim2.new(1, -10, 0, height)
    FuncFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    FuncFrame.BorderSizePixel = 0
    FuncFrame.Parent = Tabs[tabName]

    local FuncCorner = Instance.new("UICorner")
    FuncCorner.CornerRadius = UDim.new(0, 6)
    FuncCorner.Parent = FuncFrame

    local FuncLabel = Instance.new("TextLabel")
    FuncLabel.Size = UDim2.new(1, -10, 0, 30)
    FuncLabel.Position = UDim2.new(0, 5, 0, 5)
    FuncLabel.BackgroundTransparency = 1
    FuncLabel.Text = funcName
    FuncLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    FuncLabel.Font = Enum.Font.SourceSansBold
    FuncLabel.TextSize = 16
    FuncLabel.TextXAlignment = Enum.TextXAlignment.Left
    FuncLabel.Parent = FuncFrame

    local isEnabled = false
    local ToggleButton = Instance.new("TextButton")
    ToggleButton.Size = UDim2.new(0, 60, 0, 25)
    ToggleButton.Position = UDim2.new(1, -65, 0, 35)
    ToggleButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    ToggleButton.Text = "OFF"
    ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    ToggleButton.Font = Enum.Font.SourceSans
    ToggleButton.TextSize = 14
    ToggleButton.Parent = FuncFrame

    local ToggleCorner = Instance.new("UICorner")
    ToggleCorner.CornerRadius = UDim.new(0, 4)
    ToggleCorner.Parent = ToggleButton

    local currentBind = defaultBind or Enum.KeyCode.Unknown
    local BindButton = Instance.new("TextButton")
    BindButton.Size = UDim2.new(0, 60, 0, 25)
    BindButton.Position = UDim2.new(0, 5, 0, 35)
    BindButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    BindButton.Text = currentBind == Enum.KeyCode.Unknown and "None" or currentBind.Name
    BindButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    BindButton.Font = Enum.Font.SourceSans
    BindButton.TextSize = 14
    BindButton.Parent = FuncFrame

    local BindCorner = Instance.new("UICorner")
    BindCorner.CornerRadius = UDim.new(0, 4)
    BindCorner.Parent = BindButton

    local waitingForBind = false
    BindButton.MouseButton1Click:Connect(function()
        waitingForBind = true
        BindButton.Text = "..."
    end)

    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if waitingForBind and not gameProcessed and input.UserInputType == Enum.UserInputType.Keyboard then
            if input.KeyCode == Enum.KeyCode.Delete then
                currentBind = Enum.KeyCode.Unknown
                BindButton.Text = "None"
            else
                currentBind = input.KeyCode
                BindButton.Text = currentBind.Name
            end
            waitingForBind = false
        end
    end)

    -- Sliders
    local sliderValues = {}
    local sliderLabels = {}
    local yOffset = 75
    for sliderName, sliderConfig in pairs(sliders) do
        local minValue = sliderConfig.min or 0
        local maxValue = sliderConfig.max or 100
        local defaultValue = sliderConfig.default or minValue
        local format = sliderConfig.format or "%.1f"
        sliderValues[sliderName] = defaultValue

        local SliderFrame = Instance.new("Frame")
        SliderFrame.Size = UDim2.new(1, -90, 0, 20)
        SliderFrame.Position = UDim2.new(0, 15, 0, yOffset)
        SliderFrame.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        SliderFrame.Parent = FuncFrame

        local SliderCorner = Instance.new("UICorner")
        SliderCorner.CornerRadius = UDim.new(0, 4)
        SliderCorner.Parent = SliderFrame

        local SliderBar = Instance.new("Frame")
        SliderBar.Size = UDim2.new((defaultValue - minValue) / (maxValue - minValue), 0, 0, 10)
        SliderBar.Position = UDim2.new(0, 0, 0.5, -5)
        SliderBar.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
        SliderBar.Parent = SliderFrame

        local SliderBarCorner = Instance.new("UICorner")
        SliderBarCorner.CornerRadius = UDim.new(0, 4)
        SliderBarCorner.Parent = SliderBar

        local SliderLabel = Instance.new("TextLabel")
        SliderLabel.Size = UDim2.new(0, 80, 0, 20)
        SliderLabel.Position = UDim2.new(0, 10, 0, yOffset - 20)
        SliderLabel.BackgroundTransparency = 1
        SliderLabel.Text = sliderName .. ": " .. string.format(format, defaultValue)
        SliderLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        SliderLabel.Font = Enum.Font.SourceSans
        SliderLabel.TextSize = 14
        SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
        SliderLabel.Parent = FuncFrame

        local SliderDragging = false
        local SliderButton = Instance.new("TextButton")
        SliderButton.Size = UDim2.new(0, 12, 0, 12)
        SliderButton.Position = UDim2.new((defaultValue - minValue) / (maxValue - minValue), -6, 0.5, -6)
        SliderButton.BackgroundColor3 = Color3.fromRGB(150, 150, 150)
        SliderButton.BorderSizePixel = 0
        SliderButton.Text = ""
        SliderButton.Parent = SliderFrame

        local SliderButtonCorner = Instance.new("UICorner")
        SliderButtonCorner.CornerRadius = UDim.new(0, 6)
        SliderButtonCorner.Parent = SliderButton

        SliderButton.MouseButton1Down:Connect(function()
            SliderDragging = true
        end)

        UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                SliderDragging = false
            end
        end)

        UserInputService.InputChanged:Connect(function(input)
            if SliderDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                local mouseX = input.Position.X
                local frameX = SliderFrame.AbsolutePosition.X
                local frameWidth = SliderFrame.AbsoluteSize.X
                local relativeX = math.clamp((mouseX - frameX) / frameWidth, 0, 1)
                sliderValues[sliderName] = minValue + (relativeX * (maxValue - minValue))
                SliderLabel.Text = sliderName .. ": " .. string.format(format, sliderValues[sliderName])
                SliderBar.Size = UDim2.new(relativeX, 0, 0, 10)
                SliderButton.Position = UDim2.new(relativeX, -6, 0.5, -6)
            end
        end)

        sliderLabels[sliderName] = SliderLabel
        yOffset = yOffset + 40
    end

    -- ESP Toggles
    local espSettings = {showName = false, showHealth = false, showDistance = false, showItem = false}
    if hasEspToggles then
        local function createToggle(label, position, settingKey)
            local EspToggle = Instance.new("TextButton")
            EspToggle.Size = UDim2.new(0, 80, 0, 20)
            EspToggle.Position = position
            EspToggle.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
            EspToggle.Text = label .. ": OFF"
            EspToggle.TextColor3 = Color3.fromRGB(255, 255, 255)
            EspToggle.Font = Enum.Font.SourceSans
            EspToggle.TextSize = 12
            EspToggle.Parent = FuncFrame

            local EspToggleCorner = Instance.new("UICorner")
            EspToggleCorner.CornerRadius = UDim.new(0, 4)
            EspToggleCorner.Parent = EspToggle

            EspToggle.MouseButton1Click:Connect(function()
                espSettings[settingKey] = not espSettings[settingKey]
                EspToggle.Text = label .. (espSettings[settingKey] and ": ON" or ": OFF")
                EspToggle.BackgroundColor3 = espSettings[settingKey] and Color3.fromRGB(0, 170, 0) or Color3.fromRGB(70, 70, 70)
            end)
        end

        createToggle("Name", UDim2.new(0, 5, 0, yOffset), "showName")
        createToggle("Health", UDim2.new(0, 90, 0, yOffset), "showHealth")
        createToggle("Distance", UDim2.new(0, 175, 0, yOffset), "showDistance")
        createToggle("Item", UDim2.new(0, 260, 0, yOffset), "showItem")
        yOffset = yOffset + 30
    end

    -- Toggles
    local toggleSettings = {}
    local toggleIndex = 1
    for toggleName, _ in pairs(hasToggles) do
        toggleSettings[toggleName] = false
        local Toggle = Instance.new("TextButton")
        Toggle.Size = UDim2.new(0, 100, 0, 20)
        Toggle.Position = UDim2.new(0, 5, 0, yOffset + ((toggleIndex - 1) * 25))
        Toggle.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
        Toggle.Text = toggleName .. ": OFF"
        Toggle.TextColor3 = Color3.fromRGB(255, 255, 255)
        Toggle.Font = Enum.Font.SourceSans
        Toggle.TextSize = 12
        Toggle.Parent = FuncFrame

        local ToggleCorner = Instance.new("UICorner")
        ToggleCorner.CornerRadius = UDim.new(0, 4)
        ToggleCorner.Parent = Toggle

        Toggle.MouseButton1Click:Connect(function()
            toggleSettings[toggleName] = not toggleSettings[toggleName]
            Toggle.Text = toggleName .. (toggleSettings[toggleName] and ": ON" or ": OFF")
            Toggle.BackgroundColor3 = toggleSettings[toggleName] and Color3.fromRGB(0, 170, 0) or Color3.fromRGB(70, 70, 70)
        end)
        toggleIndex = toggleIndex + 1
    end
    yOffset = yOffset + (toggleIndex - 1) * 25

    -- Color Picker
    local colorSettings = {r = 0, g = 255, b = 50}
    local colorSettings2 = {r = 255, g = 0, b = 205}
    local ColorCodeLabel
    if hasColorPicker or hasDualColorPicker then
        local function createColorSlider(label, position, colorKey, defaultValue, settingsTable)
            local ColorFrame = Instance.new("Frame")
            ColorFrame.Size = UDim2.new(0, 80, 0, 20)
            ColorFrame.Position = position
            ColorFrame.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            ColorFrame.Parent = FuncFrame

            local ColorCorner = Instance.new("UICorner")
            ColorCorner.CornerRadius = UDim.new(0, 4)
            ColorCorner.Parent = ColorFrame

            local ColorBar = Instance.new("Frame")
            ColorBar.Size = UDim2.new(defaultValue / 255, 0, 0, 10)
            ColorBar.Position = UDim2.new(0, 0, 0.5, -5)
            ColorBar.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
            ColorBar.Parent = ColorFrame

            local ColorBarCorner = Instance.new("UICorner")
            ColorBarCorner.CornerRadius = UDim.new(0, 4)
            ColorBarCorner.Parent = ColorBar

            local ColorDragging = false
            local ColorButton = Instance.new("TextButton")
            ColorButton.Size = UDim2.new(0, 10, 0, 10)
            ColorButton.Position = UDim2.new(defaultValue / 255, -5, 0.5, -5)
            ColorButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
            ColorButton.BorderSizePixel = 0
            ColorButton.Text = ""
            ColorButton.Parent = ColorFrame

            local ColorButtonCorner = Instance.new("UICorner")
            ColorButtonCorner.CornerRadius = UDim.new(0, 4)
            ColorButtonCorner.Parent = ColorButton

            ColorButton.MouseButton1Down:Connect(function()
                ColorDragging = true
            end)

            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    ColorDragging = false
                end
            end)

            UserInputService.InputChanged:Connect(function(input)
                if ColorDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    local mouseX = input.Position.X
                    local frameX = ColorFrame.AbsolutePosition.X
                    local frameWidth = ColorFrame.AbsoluteSize.X
                    local relativeX = math.clamp((mouseX - frameX) / frameWidth, 0, 1)
                    settingsTable[colorKey] = math.floor(relativeX * 255)
                    ColorBar.Size = UDim2.new(relativeX, 0, 0, 10)
                    ColorButton.Position = UDim2.new(relativeX, -5, 0.5, -5)
                    if ColorCodeLabel and settingsTable.r and settingsTable.g and settingsTable.b then
                        ColorCodeLabel.Text = string.format("RGB: %d, %d, %d", settingsTable.r, settingsTable.g, settingsTable.b)
                    end
                end
            end)
        end

        createColorSlider("R", UDim2.new(0, 5, 0, yOffset), "r", 0, colorSettings)
        createColorSlider("G", UDim2.new(0, 95, 0, yOffset), "g", 255, colorSettings)
        createColorSlider("B", UDim2.new(0, 185, 0, yOffset), "b", 50, colorSettings)

        ColorCodeLabel = Instance.new("TextLabel")
        ColorCodeLabel.Size = UDim2.new(0, 100, 0, 20)
        ColorCodeLabel.Position = UDim2.new(0, 5, 0, yOffset + 30)
        ColorCodeLabel.BackgroundTransparency = 1
        ColorCodeLabel.Text = string.format("RGB: %d, %d, %d", colorSettings.r, colorSettings.g, colorSettings.b)
        ColorCodeLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        ColorCodeLabel.Font = Enum.Font.SourceSans
        ColorCodeLabel.TextSize = 14
        ColorCodeLabel.Parent = FuncFrame

        if hasDualColorPicker then
            local colorPickerY2 = yOffset + 60
            createColorSlider("R2", UDim2.new(0, 5, 0, colorPickerY2), "r", 255, colorSettings2)
            createColorSlider("G2", UDim2.new(0, 95, 0, colorPickerY2), "g", 0, colorSettings2)
            createColorSlider("B2", UDim2.new(0, 185, 0, colorPickerY2), "b", 205, colorSettings2)

            local ColorCodeLabel2 = Instance.new("TextLabel")
            ColorCodeLabel2.Size = UDim2.new(0, 100, 0, 20)
            ColorCodeLabel2.Position = UDim2.new(0, 5, 0, colorPickerY2 + 30)
            ColorCodeLabel2.BackgroundTransparency = 1
            ColorCodeLabel2.Text = string.format("RGB: %d, %d, %d", colorSettings2.r, colorSettings2.g, colorSettings2.b)
            ColorCodeLabel2.TextColor3 = Color3.fromRGB(255, 255, 255)
            ColorCodeLabel2.Font = Enum.Font.SourceSans
            ColorCodeLabel2.TextSize = 14
            ColorCodeLabel2.Parent = FuncFrame
        end
    end

    local module = {
        toggle = function(enabled)
            isEnabled = enabled
            ToggleButton.Text = isEnabled and "ON" or "OFF"
            ToggleButton.BackgroundColor3 = isEnabled and Color3.fromRGB(0, 170, 0) or Color3.fromRGB(70, 70, 70)
            if isEnabled and isArrayListEnabled then
                enabledFunctions[funcName] = true
            else
                enabledFunctions[funcName] = nil
            end
            if isArrayListEnabled then
                updateArrayList()
            end
            showNotification(funcName .. " was " .. (isEnabled and "Enabled" or "Disabled"), isEnabled)
        end,
        isEnabled = function() return isEnabled end,
        getSliderValues = function() return sliderValues end,
        getEspSettings = function() return espSettings end,
        getColorSettings = function() return colorSettings end,
        getColorSettings2 = function() return colorSettings2 end,
        getToggleSettings = function() return toggleSettings end,
        setCallback = function(callback)
            ToggleButton.MouseButton1Click:Connect(function()
                module.toggle(not isEnabled)
                callback(isEnabled, sliderValues, espSettings, colorSettings, colorSettings2, toggleSettings)
            end)
            UserInputService.InputBegan:Connect(function(input, gameProcessed)
                if not gameProcessed and input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == currentBind and currentBind ~= Enum.KeyCode.Unknown then
                    module.toggle(not isEnabled)
                    callback(isEnabled, sliderValues, espSettings, colorSettings, colorSettings2, toggleSettings)
                end
            end)
            for sliderName, _ in pairs(sliders) do
                sliderLabels[sliderName].Parent.InputChanged:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement then
                        callback(isEnabled, sliderValues, espSettings, colorSettings, colorSettings2, toggleSettings)
                    end
                end)
            end
            if hasEspToggles then
                for _, child in pairs(FuncFrame:GetChildren()) do
                    if child:IsA("TextButton") and child.Text:match(": ON") or child.Text:match(": OFF") then
                        child.MouseButton1Click:Connect(function()
                            callback(isEnabled, sliderValues, espSettings, colorSettings, colorSettings2, toggleSettings)
                        end)
                    end
                end
            end
            if hasColorPicker or hasDualColorPicker then
                for _, child in pairs(FuncFrame:GetChildren()) do
                    if child:IsA("Frame") and child.Size == UDim2.new(0, 80, 0, 20) then
                        child.InputChanged:Connect(function(input)
                            if input.UserInputType == Enum.UserInputType.MouseMovement then
                                callback(isEnabled, sliderValues, espSettings, colorSettings, colorSettings2, toggleSettings)
                            end
                        end)
                    end
                end
            end
            for toggleName, _ in pairs(hasToggles) do
                for _, child in pairs(FuncFrame:GetChildren()) do
                    if child:IsA("TextButton") and child.Text:match(toggleName) then
                        child.MouseButton1Click:Connect(function()
                            callback(isEnabled, sliderValues, espSettings, colorSettings, colorSettings2, toggleSettings)
                        end)
                    end
                end
            end
        end
    }
    functionModules[funcName] = module
    return module
end

-- API to toggle GUI visibility
local guiVisible = false
local function toggleGui()
    guiVisible = not guiVisible
    MainFrame.Visible = guiVisible
    if guiVisible and not CurrentTab then
        CurrentTab = "Combat"
        Tabs["Combat"].Visible = true
        TabButtons["Combat"].BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    end
end

-- Expose API
return {
    createFunctionModule = createFunctionModule,
    toggleGui = toggleGui,
    setArrayListColors = function(color1, color2)
        arrayListColor1 = color1
        arrayListColor2 = color2
        updateArrayList()
    end,
    setArrayListEnabled = function(enabled)
        isArrayListEnabled = enabled
        ArrayListFrame.Visible = enabled
        updateArrayList()
    end,
    getFunctionModule = function(funcName)
        return functionModules[funcName]
    end
}
